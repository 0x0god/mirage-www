(* #!/usr/local/bin/ocaml *)

let lines_of_file file =
  let ic = open_in file in
  let lines = ref [] in
  let rec aux () =
    let line =
      try Some (input_line ic)
      with _ -> None in
    match line with
    | None   -> ()
    | Some l ->
      lines := l :: !lines;
      aux () in
  aux ();
  close_in ic;
  List.rev !lines

let strip str =
  let p = ref 0 in
  let l = String.length str in
  let fn = function
    | ' ' | '\t' | '\r' | '\n' -> true
    | _ -> false in
  while !p < l && fn (String.unsafe_get str !p) do
    incr p;
  done;
  let p = !p in
  let l = ref (l - 1) in
  while !l >= p && fn (String.unsafe_get str !l) do
    decr l;
  done;
  String.sub str p (!l - p + 1)

let cut_at s sep =
  try
    let i = String.index s sep in
    let name = String.sub s 0 i in
    let version = String.sub s (i+1) (String.length s - i - 1) in
    Some (name, version)
  with _ ->
    None

let key_value line =
  match cut_at line ':' with
  | None       -> None
  | Some (k,v) -> Some (k, strip v)

let filter_map f l =
  let rec loop accu = function
    | []     -> List.rev accu
    | h :: t ->
        match f h with
        | None   -> loop accu t
        | Some x -> loop (x::accu) t in
  loop [] l

let subcommand ~prefix (command, value) =
  let p1 = String.uncapitalize prefix in
  match cut_at command '-' with
  | None      -> None
  | Some(p,n) ->
    let p2 = String.uncapitalize p in
    if p1 = p2 then
      Some (n, value)
    else
      None

let echo oc ?(init=false) fmt =
  Printf.kprintf (fun str ->
    let redirect = if init then ">" else ">>" in
    Printf.fprintf oc "echo '%s' %s main.ml\n" str redirect
  ) fmt

let gen_crunch_commands oc kvs =
  let kvs = filter_map (subcommand ~prefix:"fs") kvs in
  List.iter (fun (k,v) ->
    Printf.fprintf oc "mir-crunch -name %S %s > filesystem_%s.ml\n" k v k
  ) kvs;
  echo oc ~init:true "(* Generated by mirari *)";
  echo oc "";
  List.iter (fun (k,_) ->
    echo oc "open Filesystem_%s" k
  ) kvs

let gen_network_commands oc kvs =
  let kvs = filter_map (subcommand ~prefix:"ip") kvs in
  match kvs with
  | ["use-dhcp", "true"] -> echo oc "let ip = `DHCP"
  | _ ->
    let address =
      try List.assoc "address" kvs
      with _ -> "10.0.0.2" in
    let netmask =
      try List.assoc "netmask" kvs
      with _ -> "255.255.255.0" in
    let gateway =
      try List.assoc "gateway" kvs
      with _ -> "10.0.0.1" in
    echo oc "let get = function Some x -> x | None -> failwith \"Bad IP!\"";
    echo oc "let ip = `IPv4 (";
    echo oc "  get (Net.Nettypes.ipv4_addr_of_string %S)," address;
    echo oc "  get (Net.Nettypes.ipv4_addr_of_string %S)," netmask;
    echo oc "  [get (Net.Nettypes.ipv4_addr_of_string %S)]" gateway;
    echo oc ")"

let gen_listen_commands oc kvs =
  let kvs = filter_map (subcommand ~prefix:"listen") kvs in
  let port =
    try List.assoc "port" kvs
    with _ -> "80" in
  echo oc "let listen_port = %s" port;
  try
    let a = List.assoc "address" kvs in
    echo oc "let listen_address = Net.Nettypes.ipv4_addr_of_string %S" a
  with _ ->
    echo oc "let listen_address = None"

let gen_header oc =
  Printf.fprintf oc "#!/bin/sh -e\n# Generated by mirari\n"

let gen_main oc kvs =
  let main =
    try List.assoc "main" kvs
    with _ ->
      Printf.eprintf "Missing main function!\n";
      exit 1 in
  echo oc "let main () =";
  echo oc "  Printf.eprintf \"listening to HTTP on port %%d\\\\n\" listen_port;";
  echo oc "  let spec = Cohttp_lwt_mirage.Server.({";
  echo oc "    callback    = %s;" main;
  echo oc "    conn_closed = (fun _ () -> ());";
  echo oc "  }) in";
  echo oc "  Net.Manager.create (fun mgr interface id ->";
  echo oc "    Net.Manager.configure interface ip >>";
  echo oc "    Cohttp_lwt_mirage.listen mgr (listen_address, listen_port) spec";
  echo oc "  )";
  echo oc "";
  echo oc "let () = OS.Main.run (main ())"

let () =
  let lines = lines_of_file "foo.ml" in
  let kvs = filter_map key_value lines in
  let oc = open_out "gen_main.sh" in

  gen_header oc;
  gen_crunch_commands oc kvs;
  echo oc "";
  gen_network_commands oc kvs;
  echo oc "";
  gen_listen_commands oc kvs;
  echo oc "";
  gen_main oc kvs;

  close_out oc;
  exit (Sys.command "sh ./gen_main.sh")

